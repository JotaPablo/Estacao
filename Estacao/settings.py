"""
Django settings for Estacao project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

GDAL_LIBRARY_PATH = r'C:\OSGeo4W\bin\gdal310.dll'



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4v=r17^$xaer4vd_7_2ozk4q@@j&h6zfzw)2m86w2@z^a0=nt_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.ngrok.io', '.ngrok-free.app'] # Usado para testar remotamente com o ngrok


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.gis',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'timescale.db',
    'corsheaders',
    'rest_framework',
    'drf_spectacular', # Para habilitar o Swagger
    'rest_framework.authtoken',
    'Dispositivo',
    'Dados_Climaticos',
    'Direcao_Vento',

]

REST_FRAMEWORK = {
    # Aqui você pode ter outras configurações que já existam, só adicione essa linha para usar o AutoSchema
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Configurações do drf-spectacular para personalizar a documentação Swagger
SPECTACULAR_SETTINGS = {
    "TITLE": "Estacao API",
    "DESCRIPTION": "API para monitoramento climático e dispositivos",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "AUTHENTICATION_WHITELIST": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "SWAGGER_UI_SETTINGS": {
        "persistAuthorization": True,
        "deepLinking": True,
        "displayRequestDuration": True,
        "filter": True,
        "persistAuthorization": True
    },
    "ENABLE_DJANGO_DEPLOY_CHECK": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SHOW_REQUEST_HEADERS": True,
    "SCHEMA_PATH_PREFIX": r'/api/',
    "SCHEMA_COERCE_PATH_PK": True,
    "SCHEMA_COERCE_METHOD_NAMES": {
        "update": "put"
    },
    "COMPONENT_SPLIT_PATCH": True,
    "COMPONENT_NO_READ_ONLY_REQUIRED": True
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Para permitir acesso a API de outros links
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Estacao.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Estacao.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'timescale.db.backends.postgis', 
        'NAME': 'estacao_teste',
        'USER': 'postgres',
        'PASSWORD': 'aratinha',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

TIMESCALE_MIGRATE_HYPERTABLE_WITH_FRESH_TABLE = False

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS: Permitir requisições de qualquer origem (útil para testes com ngrok e frontend externo)
CORS_ALLOW_ALL_ORIGINS = True

# Se quiser mais controle, use isso em vez do ALL_ORIGINS:
# CORS_ALLOWED_ORIGINS = [
#     "https://abc123.ngrok.io",
#     "http://localhost:3000",  # Exemplo: se estiver usando React localmente
# ]